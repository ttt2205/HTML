=========================================================================================================================
                                Chapter 3: Strings
=========================================================================================================================
- .length
-> return length of strings

-------------------------------------------------------------------------------------------------------------------------
- .charAt(index) 
-> trả về ký tự ở index cần lấy

-------------------------------------------------------------------------------------------------------------------------
- .indexOf(string) 

-> trả về vị trí tìm thấy đầu tiên từ trái sang phải
(string là character or group characters )

-------------------------------------------------------------------------------------------------------------------------
- .lastIndexOf(string) 

-> trả về vị trí tìm thấy đầu tiên từ phải sang trái 
(string là character or group characters )

-------------------------------------------------------------------------------------------------------------------------
- .slice(start, end) 

-> returns the characters from the start position to the ending position.  
-> Note, the returned result does not include the ending position. (không bao gồm vị trí kết thúc)
-> Note, if the ending position parameteris not provided, the slice method, returns the characters from the startposition to the end of the string.
-> Note, if the ending position parameter is less than or equal to the start position. Parameter, nothing will be returned.

-------------------------------------------------------------------------------------------------------------------------
- .toUpperCase() 
-> The ttoUpperCase method returnsthe string in all uppercase.

-------------------------------------------------------------------------------------------------------------------------
- .toLowerCase() 
-> The toLowerCase method returnsthe string in all lowercase.

-------------------------------------------------------------------------------------------------------------------------
- .includes(string) 

-> Tìm kiếm chuỗi string có trong chuỗi đã gọi hay không
-> The includes method returns Boolean data. 
-> If the character or group ofcharacters we provide, the method is not inside the string. The includes method returns falses.
-> Likewise (tương tự), if they are inside the string,the Includes method returns true.

-------------------------------------------------------------------------------------------------------------------------
- .split()

-> trả về một mảng gồm các phần tử là chuỗi đã được phân tách.
VD: 
    1.const myVariable = "Mathematics";
    myVariable.split("e"); // kí tự "e"
KQ  -> ["Math","matics"]

    2.const myVariable = "Math";
    myVariable.split(""); // không có ký tụ
KQ  -> ["M","a","t","h"]

    3.const myVariable = "Hello World!";
    myVariable.split(" "); // ký tự khoảng trắng 
KQ  -> ["Hello","World!"]

-------------------------------------------------------------------------------------------------------------------------
- .trim()

-> loại bỏ khoảng trắng ở đầu của hai chuỗi.


=========================================================================================================================
                                Chapter 4: Numbers
=========================================================================================================================
- Number(myString) 

-> biến một chuỗi có ký tự số thành số
-> If we use the 'number function' on data that cannot be converted (chuyển đổi) to a number. The number function will return NaN,which is an acronym for not a number. 
VD: nếu myString có ký tự là chữ hoặc là undefined thì trả về NaN (not a number)
-> true -> trả về 1
-> false - trả về 0

-------------------------------------------------------------------------------------------------------------------------
- Number.isInterger(myNumber)

-> The Number.isInterger() method determines whether the passed value is an integer.
(Kiểm tra xem myNumber có phải là số.)
-> Trả về true hoặc false

-------------------------------------------------------------------------------------------------------------------------
- Number.parseFloat()

-> The method parses an argument and returns a floating point number. If a number cannot be parsed from the argument, it returns NaN.
(loại bỏ các ký tự không phải số và trả về giá trị có kiểu dữ liệu số (number), nếu không được sẽ trả về NaN)
VD:
    1. const myString = "42.123abc"
    Number.parseFloat(myString); 
KQ  -> 42.123 // kiểu numbers

-------------------------------------------------------------------------------------------------------------------------
- .toFixed()

-> Làm tròn tới chữ số thập phân thứ n
-> The method formats a number according to how many decimal (số thập phân) points you provide (cung cấp) as the parameter (tham số).
-> Trả về kiểu dữ liệu là string
VD:
    1. const myString = "42.123abc"
    Number.parseFloat(myString).toFixed(1); 
KQ  -> 42.1 // kiểu string

-------------------------------------------------------------------------------------------------------------------------
- Number.parseInt() 

-> The method parses a string argument and returns an integer 
(loại bỏ các ký tự không phải số và trả về giá trị có kiểu dữ liệu số (number) nhưng là số nguyên, nếu không được sẽ trả về NaN)
VD:
    1. const myString = "42.123abc"
    Number.parseInt(myString); 
KQ  -> 42 // kiểu numbers

-------------------------------------------------------------------------------------------------------------------------
- .toString()

-> chuyển đổi một kiểu dữ liệu number về dạng kiểu dữ liệu string.

-------------------------------------------------------------------------------------------------------------------------
- NaN is an acronym for Not a Number
- Number.isNaN() 

-> Kiểm tra xem có phải NaN
-> NaN có kiểu dữ liệu là number.
-> The method determines whether the passed value is NaN and its type is Number.


=========================================================================================================================
                                Chapter 5: Math Methods
=========================================================================================================================
-> math javascript mdn: trang về các phương thức math trong js

-------------------------------------------------------------------------------------------------------------------------
- Math.trunc() 

-> trả về số nguyên đã loại bỏ phần thập phân
VD: 
        Math.trunc(Math.PI)
KQ->    3

-------------------------------------------------------------------------------------------------------------------------
- Math.round()

-> trả về số đã được làm tròn tới số nguyên gần nhất 
VD: 
        Math.round(3.4) -> 3
        Math.round(3.5) -> 4

-------------------------------------------------------------------------------------------------------------------------
- Math.ceil() 

-> làm tròn lên 
VD: 
        Math.round(3.4) -> 4
        Math.round(3.5) -> 4

-------------------------------------------------------------------------------------------------------------------------
- Math.floor() 

-> làm tròn xuống 
VD: 
        Math.round(3.4) -> 3
        Math.round(3.5) -> 3

-------------------------------------------------------------------------------------------------------------------------
- Math.pow()

-> lấy số mũ

-------------------------------------------------------------------------------------------------------------------------
- Math.min() hoặc Math.max()

-> trả về số nhỏ nhất hoặc số lớn nhất
VD: 
        Math.min(3,4,5) -> 3
        const array1 = [2, 3, 1];
        console.log(Math.min(...array1));
KQ->    // Expected output: 1

-------------------------------------------------------------------------------------------------------------------------
- Math.random() 

-> trả về số ngẫu nhiên từ 0 đến 1

=========================================================================================================================
                                Chapter 15: Arrays
=========================================================================================================================
=> nếu truy cập vào vị trí không tồn tại sẽ trả về undefined.

-------------------------------------------------------------------------------------------------------------------------
- .push(value) 
-> thêm phần tử vào cuối mảng và trả về độ dài mảng.

- .unshift(value)
-> thêm phần tử vào đầu mảng và trả về độ dài mảng.

-------------------------------------------------------------------------------------------------------------------------
- .pop()
-> xóa phần tử vào cuối mảng và trả về phần tử đó.

- .shift()
-> xóa phần thử ở đầu mảng và trả về phần tử đó.

-------------------------------------------------------------------------------------------------------------------------
- .splice(start, end, temp)
- .splice(start, end)
- .splice(Start)
- .splice(start, end, temp1, temp2, ..., tempN)

-> xóa, thay thế ,chèn phần tử vào mảng
VD: xóa
        const a = [1,2,3,4];
        a.splice(1,1); // xóa vị trí thứ nhất
        a.splice(1,2); // xóa vị trí thứ 1 đến 2
        a.splice(1,0); // không xóa vị trí nào
        s.splice(1); // cắt từ vị trí thứ 1 tới cuối mảng

VD: thay thế, chèn
        const a = [1,2,3,4];
        a.splice(1,1,5); // xóa vị trí 1 và thay thế bằng 5
        a.splice(1,0,5); // chèn 5 vào vị trí 1
        a.splice(1,0,5,6,7); // chèn 5 6 7 bắt đầu bằng vị trí 1

-------------------------------------------------------------------------------------------------------------------------
- .slice(start)      // cắt từ vị trí 2 đến hết
- .slice(start, end) // cắt từ start đến (end - 1)

-> cắt lát
VD:
        const a = [1,2,3,4,5,6];
        a.slice(2); // cắt từ vị trí thứ 2 về sau
        a.slice(2, 5); // cắt từ vị trí thứ 2 đến vị trí thứ 4

-------------------------------------------------------------------------------------------------------------------------
- .reverse() 

-> đảo ngược lại mảng

-------------------------------------------------------------------------------------------------------------------------
- .concat()

-> nối 2 mảng lại với nhau.
VD:
        const a = ['A','B'];
        const b = ['C','D'];
        const new = a.concat(b);

-------------------------------------------------------------------------------------------------------------------------
- .join("")

-> nối một mảng thành một chuỗi, thêm kí tự để chèn giữa các kí tự trong chuỗi.

-------------------------------------------------------------------------------------------------------------------------
- Một số lưu ý khác về mảng:
VD:
        const a = ['A','B'];
        const b = ['C','D'];
        const new = [...a, ...b]; // lấy từng phần tử mảng ghép vào mảng new.
        const new1 = [a, b]; // mảng có 2 phần tử là mảng a và mảng b.

=========================================================================================================================
                                Chapter 18: JSON
=========================================================================================================================
-> JSON: JavaScript Object Notation
-> JSON is used to send and receive data.
-> JSON is a text format that is completely language independent.
-> Meaning JSON is used to send & receive data in many languages ...not just in JavaScript.

=========================================================================================================================
                                Chapter 20: DOM (DOM - Document Object Model)
=========================================================================================================================
=> <script defer src=""></script>
-> thêm defer vào để HTML tải hết xong mới tải tệp JS.

-------------------------------------------------------------------------------------------------------------------------
- document.getElementByID("")
- document.getElementByClassName("")
- document.getElementByTagName("")

-> sẽ trả về element hoặc HTMLCollection.
-> có thể thao tác như mảng.

-------------------------------------------------------------------------------------------------------------------------
- document.querySelector("")
-> chọn một element theo id, class, element đầu tiên gặp phải trong HTML.

- document.querySelectorAll("")
-> chọn toàn bộ element có id, class, element cần truy cập. Trả về một NodeList.

-> Ký hiệu đi kèm: #id, .class, element.
-> có thể thao tác như mảng.

-------------------------------------------------------------------------------------------------------------------------
- .parentElement : truy cập tới phần tử cha.

- .children : truy cập tới tất cả phần tử con. Trả về HTML Collection.

- .childNodes : truy cập tới tất cả phần tử con và tất cả phần tử node. Trả về một NodeLists.

- .hasChildNodes() : kiểm tra xem phần tử đang xét có phần tử con nào không. Trả về true/false.

- .firstChild : lấy ra node đầu tiên trong phần tử chỉ định.

- .firstElementChild : lấy ra element đầu tiên của phần tử chỉ định.

- .lastChild : lấy ra cuối cùng tiên trong phần tử chỉ định.

- .lastElementChild : lấy ra element cuối cùng của phần tử chỉ định.

- .nextSibling : lấy ra node kế tiếp phía sau.

- .nextElementSibling : lấy ra element kế tiếp phía sau.

- .previousSibling : lấy ra node kế tiếp phía trước.

- .previousElementSibling : lấy ra element kế tiếp phía trước.

-------------------------------------------------------------------------------------------------------------------------
- .createElement("") 
-> tạo thêm một element mới.

- .append(element) 
-> thêm element vào bên trong phần tử cha.

- .remove() 
-> xóa element truy cập.

=========================================================================================================================
                              Chapter 21: Event Listeners
=========================================================================================================================
Syntax: .addEventListener(event, function, useCapture)
        .removeEventListener(event, function, useCapture)

- useCapture: 
-> Vấn đề 1:
- dùng để ngăn cản sự nổi bọt của phần tử. Mặc định false (ko ngăn cản), true (ngăn cản) nhưng khi ngăn cản phần tử ngoài cùng sẽ đi ngược vào trong.
- nên sử dụng thêm 'e.stopPropagation()' để ngăn chặn sự nổi bọt của các phần tử.
- có thể để capture = false và thêm 'e.stopPropagation()' vào từng phần.

-> Vấn đề 2:
- khi sử dụng e.target ở phần tử trong cùng và ở phần tử ngoài vẫn dùng e.target thì sẽ là dùng e.target của phần tử đầu tiên gọi.
- giải pháp dùng biến cho từng phần tử cụ

-------------------------------------------------------------------------------------------------------------------------
Syntax: .classList.add() : thêm một lớp mới. (lớp mới này sẽ không thể ghi đè lên lớp đã có nên cần phải xóa lớp đã định nghĩa)
        .classList.remove() : xóa một lớp.
        .classList.toggle() : nếu có thì xóa, nếu không có thì thêm.

-------------------------------------------------------------------------------------------------------------------------
- .preventDefault() 
-> ngăn chặn hành vi mặc định của trình duyệt.


=========================================================================================================================
                              Chapter 22: Web API
=========================================================================================================================
        LocalStorage: dữ liệu không bị mất khi load hoặc tắt trang web trừ khi ta xóa nó.

- localStorage.setItem("nameStorage", JSON.stringify(object));
-> lưu object xuống LocalStorage.
-> nameStorage: tên đặt cho biến lưu trữ dữ liệu trong LocalStorage.

- JSON.parse(localStorage.getItem("nameStorage"));
-> lấy object từ LocalStorage.
-> nameStorage: tên đặt cho biến lưu trữ dữ liệu trong LocalStorage.

- localStorage.removeItem("nameStorage");
-> xóa object chỉ định trong LocalStorage.
-> nameStorage: tên đặt cho biến lưu trữ dữ liệu trong LocalStorage.

- localStorage.clear();
-> xóa toàn bộ dữ liệu trong LocalStorage.

- localStorage.key(index);
-> lấy ra tên biến trong tại vị trí index trong LocalStorage.

- localStorage.length;
-> lấy ra chiều dài số lượng biến có trong LocalStorage.

=========================================================================================================================
                              Chapter 23: Modules
=========================================================================================================================
-> tự áp dụng từ khóa defer và nghiêm ngặt "use strict".
-> export: xuất ra.
-> import: nhập vào.

=========================================================================================================================
                              Chapter 24: Higher Order Functions
=========================================================================================================================